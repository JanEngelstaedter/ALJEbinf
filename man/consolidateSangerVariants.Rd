% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SangerVariants.R
\name{consolidateSangerVariants}
\alias{consolidateSangerVariants}
\title{Consolidate variants called across Sanger sequences of the same sample}
\usage{
consolidateSangerVariants(variants, strictness = 3L)
}
\arguments{
\item{variants}{A list of called variant tables, as output by the `callSangerVatiants_fasta` function.}

\item{strictness}{Determines how stringent the consolidation across different sequences will be -
the greater this number the fewer variants will be called. See below for details.}
}
\value{
A list with the same structure as the input, containing two tables:
"summary" contains the number of variants of different types detected for each sample,
whereas "details" provides detailed information for each variant.
}
\description{
This function operates on output generated by the `callSangerVatiants_fasta` function.
The output that `callSangerVatiants_fasta` contains variants for each Sanger sequence,
but for one sample there are often several sequences that may overlap, e.g.
when there are forward and reverse reads.
`consolidateSangerVariants` attempts to consolidate these variants across reads into
a single variant call, with adjustable level of strictness as to when a variant is considered
"trustworthy".
}
\details{
The `strictness` parameter can take four different values that determines both which variants
will be retained and what the reported contig boundaries and length will be.
Depending on the value of `strictness`, the following varients will be reported:
* 0L: All
* 1L: Only those that are present in all reads that cover the respective position, i.e.
where there are no conflicts between variants detected vs. not detected.
* 2L: Only those that are present in all successful reads.
* 3L: Only those that are present in all reads (successul or not).

The following two examples illustrate these options. Both examples involve two reads,
but in the first both reads sequenced properly whereas in the second example one read
sequence was deemed unsuccessful:

Example 1:

`-------x------y---------      Success=TRUE`
`    ---x-----------------z--  Success=TRUE`

`Strictness   Map_start   Map_end   Contig_length   Variants called`
`0            1           28        28              x, y, z`
`1            1           28        28              x, z`
`2            5           24        20              x`
`3            5           24        20              x`

Example 2:

`-------x------y---------  Success=TRUE`
`   ---------------        Success=FALSE`

`Strictness   Map_start   Map_end   Contig_length   Variants called`
`0            1           24        24              x, y`
`1            1           24        24              x, y`
`2            1           24        24              x, y`
`3            NA          NA        NA              none`
}
